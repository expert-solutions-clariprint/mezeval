<?
/*
Representation des Ã©lÃ¨ves
CREATE TABLE t_classe (
  id int(11) NOT NULL auto_increment,
  intitule varchar(200) default NULL,
  description text,
  annee int(11) default NULL,
  created datetime default NULL,
  creator int(11) default NULL,
  etablissement int(11) default NULL,
  socle varchar(100) default NULL,
  a_color varchar(7) default NULL,
  b_color varchar(7) default NULL,
  c_color varchar(7) default NULL,
  z_color varchar(7) default NULL,
  PRIMARY KEY  (id),
  KEY etablissement (etablissement),
  CONSTRAINT FOREIGN KEY (etablissement) REFERENCES t_etablissement (id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
*/

class CClasse
{
	var $id;
	var $etablissement;
	var $intitule;
	var $niveau;
	var $annee;
	var $annee2;
	var $description;
	var $manager;
	var $contrat;
	var $a_color;
	var $b_color;
	var $c_color;
	var $z_color;

	var $socle;
	var $created;
	var $creator;
	
	/* class methods */
			
	function objectsWithQuery($query)
	{
		global $DB;
		$res = array();
		$r = $DB->query($query);
		if ($r)
		{
			while ($tmp  = $DB->getRow($r))
			{
				$res[] = CClasse::objectWithArray($tmp);
			}
		}
		return $res;
	}
	
	function objectWithQuery($query)
	{
		$r = CClasse::objectsWithQuery($query);
		if (count($r) > 0) return $r[0];
		return null;
	}
	
	function objectWithId($id)
	{
		global $DB;
		if ($u = CUser::user())
		{
			if ($arr = CClasse::objectsWithQuery("SELECT * FROM t_classe WHERE id=$id and manager=".$u->id))
			{
				return $arr[0];
			}
		}
		return null;
	}

	function deleteObjectWithId($id)
	{
		global $DB;
		if ($u = CUser::user())
		{
			if (CClasse::isManagerOfClasse($u->id,$id))
			{
				CEvaluation::deleteObjectsWithClasse($id);
				CBilanProgression::deleteObjectsWithClasse($id);
				CBilanSocle::deleteObjectsWithClasse($id);
				CEleve::deleteObjectsWithClasse($id);
				CPeriode::deleteObjectsWithClasse($id);
				CProgression::deleteObjectWithClasse($id);
				$DB->query("DELETE FROM t_classe WHERE id=$id");
			}
		}
	}
	
	function classesForManager($manager_id)
	{
		return CClasse::objectsWithQuery("select * from t_classe WHERE manager=$manager_id ORDER BY annee,intitule desc");
	}
	
	function objects()
	{
		return CClasse::objectsWithQuery("select * from t_classe order by annee,intitule desc");
	}
	function objectsForEtablissement($etab_id)
	{
		return CClasse::objectsWithQuery("select * from t_classe WHERE etablissement=$etab_id order by annee desc,intitule asc");
	}
		
	function objectWithArray(&$arr)
	{
		$u = new CClasse();
		$u->initWithArray($arr);
		return $u;
	}

	function createObjectWithArray(&$arr)
	{
		$u = CClasse::objectWithArray($arr);
		if ($u->create()) return $u;
		else return null;
	}
	
	function isManagerOfClasse($user_id,$classe_id)
	{
		global $DB;
		return $DB->oneValue("SELECT COUNT(id) FROM t_classe WHERE id=$classe_id AND manager=$user_id");
	}
	
	/* object method */
	
	function initWithArray(&$arr)
	{
		if (array_key_exists("id",$arr))
			$this->id = $arr["id"];
		if (array_key_exists("etablissement",$arr))
			$this->etablissement = $arr["etablissement"];

		if (array_key_exists("manager",$arr))
			$this->manager = $arr["manager"];

		if (array_key_exists("intitule",$arr))
			$this->intitule = stripcslashes($arr["intitule"]);
		if (array_key_exists("niveau",$arr))
			$this->niveau = $arr["niveau"];

		if (array_key_exists("annee",$arr))
			$this->annee = $arr["annee"];
		if (array_key_exists("annee2",$arr))
			$this->annee2 = $arr["annee2"];
		if (array_key_exists("description",$arr))
			$this->description = stripcslashes($arr["description"]);
		if (array_key_exists("socle",$arr))
			$this->socle = stripcslashes($arr["socle"]);
		if (array_key_exists("socle_b2i",$arr))
			$this->socle_b2i = stripcslashes($arr["socle_b2i"]);
		if (array_key_exists("socle_langue",$arr))
			$this->socle_langue = stripcslashes($arr["socle_langue"]);

		if (array_key_exists("creator",$arr))
			$this->creator = $arr["creator"];
		if (array_key_exists("created",$arr))
			$this->created = strtotime($arr["created"]);

		if (array_key_exists("a_color",$arr))
			$this->a_color = $arr["a_color"];
		if (array_key_exists("b_color",$arr))
			$this->b_color = $arr["b_color"];
		if (array_key_exists("c_color",$arr))
			$this->c_color = $arr["c_color"];
		if (array_key_exists("z_color",$arr))
			$this->z_color = $arr["z_color"];

		if (array_key_exists("a_code",$arr))
			$this->a_code = $arr["a_code"];
		if (array_key_exists("b_code",$arr))
			$this->b_code = $arr["b_code"];
		if (array_key_exists("c_code",$arr))
			$this->c_code = $arr["c_code"];
		if (array_key_exists("z_code",$arr))
			$this->z_code = $arr["z_code"];

		if (array_key_exists("a_title",$arr))
			$this->a_title = $arr["a_title"];
		if (array_key_exists("b_title",$arr))
			$this->b_title = $arr["b_title"];
		if (array_key_exists("c_title",$arr))
			$this->c_title = $arr["c_title"];
		if (array_key_exists("z_title",$arr))
			$this->z_title = $arr["z_title"];

	}
	
	function create()
	{
		global $DB;
		
		if ($u = CUser::getCurrentUser())
		{
			
			$query = sprintf("INSERT INTO t_classe (intitule,niveau,etablissement,annee,annee2,description,socle,socle_b2i,socle_langue,a_color,b_color,c_color,z_color,a_title,b_title,c_title,z_title,a_code,b_code,c_code,z_code,manager,creator,created) VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,NOW())",
								$DB->STRING($this->intitule),
								$DB->STRING($this->niveau),
								$DB->ID($this->etablissement),
								$DB->INT($this->annee),
								$DB->INT($this->annee2),
								$DB->STRING($this->description),
								$DB->STRING($this->socle),
								$DB->STRING($this->socle_b2i),
								$DB->STRING($this->socle_langue),
								$DB->STRING($this->a_color),
								$DB->STRING($this->b_color),
								$DB->STRING($this->c_color),
								$DB->STRING($this->z_color),
								$DB->STRING($this->a_title),
								$DB->STRING($this->b_title),
								$DB->STRING($this->c_title),
								$DB->STRING($this->z_title),
								$DB->STRING($this->a_code),
								$DB->STRING($this->b_code),
								$DB->STRING($this->c_code),
								$DB->STRING($this->z_code),
								$DB->ID($u->id),
								$DB->ID($u->id));
			$res = $DB->query($query);
			if ($res)
			{
				$this->id = $DB->getLastID();
				return true;
			}
			
		}
		return false;
	}
	
	function update()
	{
		if (!$this->id) return $this->create();
		global $DB;
		if ($u = CUser::getCurrentUser())
		{
			$query = sprintf("UPDATE t_classe SET intitule = %s,niveau = %s, annee=%s,annee2=%s, description = %s, socle = %s, socle_b2i = %s,socle_langue = %s, a_color = %s, b_color = %s, c_color = %s, z_color = %s, a_title = %s, b_title = %s, c_title = %s, z_title = %s, a_code = %s, b_code = %s, c_code = %s, z_code = %s WHERE id = %s",
								$DB->STRING($this->intitule),
								$DB->STRING($this->niveau),
								$DB->INT($this->annee),
								$DB->INT($this->annee2),
								$DB->STRING($this->description),
								$DB->STRING($this->socle),
								$DB->STRING($this->socle_b2i),
								$DB->STRING($this->socle_langue),
								$DB->STRING($this->a_color),
								$DB->STRING($this->b_color),
								$DB->STRING($this->c_color),
								$DB->STRING($this->z_color),
								$DB->STRING($this->a_title),
								$DB->STRING($this->b_title),
								$DB->STRING($this->c_title),
								$DB->STRING($this->z_title),
								$DB->STRING($this->a_code),
								$DB->STRING($this->b_code),
								$DB->STRING($this->c_code),
								$DB->STRING($this->z_code),
								$DB->INT($this->id));
			$DB->query($query);
		}
	}
	
	function info()
	{
		return $this->intitule();
	}
	function intitule()
	{
		if (!$this->intitule) return "nouveau groupe";
		return $this->intitule;
	}
	function periodes()
	{
		return CPeriode::objectsForClasse($this->id);
	}
	function eleves()
	{
		return CEleve::objectsForClasse($this->id);
	}
	function eleveWithId($id)
	{
		return CEleve::objectWithIdAndClasse($id,$this->id);
	}
	
	function socle()
	{
		if ($this->socle) return CSocle::objectFromFile($this->socle);
		return null;
	}
	function b2i()
	{
		if ($this->socle_b2i) return CSocle::objectFromFile($this->socle_b2i);
		return null;
	}
	function langue()
	{
		if ($this->socle_langue) return CSocle::objectFromFile($this->socle_langue);
		return null;
	}
	
	function progressions($periode_id = null)
	{
		return CProgression::parentsForClasse($this->id,$periode_id);
	}
	function bilansProgression()
	{
		return CBilanProgression::objectsForClasse($this->id);
	}

	function url_colors()
	{
		if (!$this || !is_a($this,"CClasse"))
		{
			if ($c = $_SESSION["classe"]) return $c->url_colors();
			else return "";
		}
		return sprintf("a_color=%s&b_color=%s&c_color=%s&z_color=%s",
						urlencode($this->a_color()),
						urlencode($this->b_color()),
						urlencode($this->c_color()),
						urlencode($this->z_color()));
	}
	
	function colorsArray()
	{
		return array(
				$this->a_color(),
				$this->b_color(),
				$this->c_color(),
				$this->z_color());
	}

	function a_color()
	{
		if ($this->a_color) return $this->a_color;
		return "#00ff99";
	}

	function b_color()
	{
		if ($this->b_color) return $this->b_color;
		return "#ffff99";
	}
	function c_color()
	{
		if ($this->c_color) return $this->c_color;
		return "#ffcc33";
	}
	function z_color()
	{
		if ($this->z_color) return $this->z_color;
		return "#cccccc";
	}
	
	function a_code()
	{
		if ($this->a_code) return $this->a_code;
		return "a";
 	}
	function b_code()
	{
		if ($this->b_code) return $this->b_code;
		return "b";
 	}
	function c_code()
	{
		if ($this->c_code) return $this->c_code;
		return "c";
 	}
	function z_code()
	{
		if ($this->z_code) return $this->z_code;
		return "x";
 	}
	function codes()
	{
		return array($this->a_code(),$this->b_code(),$this->c_code(),$this->z_code());
	}

	function internalCode($x)
	{
		if ($x == $this->a_code()) return "a";
		else if ($x == $this->b_code()) return "b";
		else if ($x == $this->c_code()) return "c";
		else if ($x == $this->z_code()) return "z";
		else return "";
	}

	function userCode($x)
	{
		if ($x == "a") return $this->a_code();
		if ($x == "b") return $this->b_code();
		if ($x == "c") return $this->c_code();
		if ($x == "x") return $this->z_code();
		return "";
	}

	function codesUserToInternalMap()
	{
		return array($this->a_code() => "a",
					$this->b_code() => "b",
					$this->c_code() => "c",
					$this->z_code() => "x");
	}
	
	function codeUser2Interne($x)
	{
		$map = $this->codesUserToInternalMap();
		return $map[$x];
	}

	function titles()
	{
		return array($this->a_title(),$this->b_title(),$this->c_title(),$this->z_title());
	}
	function a_title()
	{
		if ($this->a_title) return $this->a_title;
		return "Semble acquis";
 	}
	function b_title()
	{
		if ($this->b_title) return $this->b_title;
		return "Ã renforcer";
 	}
	function c_title()
	{
		if ($this->c_title) return $this->c_title;
		return "En dÃ©but dâacquisition";
 	}
	function z_title()
	{
		if ($this->z_title) return $this->z_title;
		return "Absence de rÃ©ponse";
 	}

	

	function colorForEval($e)
	{
		switch($e)
		{
			case 'a' : return $this->a_color();
			case 'b' : return $this->b_color();
			case 'c' : return $this->c_color();
			case 'x': return $this->z_color();
		}
		return "#FFFFFF";
	}
	function decimalColorForEval($e)
	{
		$c = $this->colorForEval($e);
		
		return sprintf("%s,%s,%s",
							hexdec(substr($c,1,2)),
							hexdec(substr($c,3,2)),
							hexdec(substr($c,5,2)));
	}
	
	function etablissement()
	{
		if ($this->etablissement) return CEtablissement::objectWithId($this->etablissement);
		return null;
	}
	
	function annee()
	{
		if (!$this->annee) return date("Y");
		return $this->annee;
	}
	
	function annee2()
	{
		if (!$this->annee2) return ($this->annee() + 1);
		return $this->annee2;
	}
	function infoAnnee()
	{
		return sprintf("%d - %d", $this->annee(),$this->annee2());
	}
	
	function evaluations()
	{
		return CEvaluation::objectsForClasse($this->id);
	}
	
	function print_xml($deep=0)
	{
		printf("%s<CLASSE intitule='%s' niveau='%s' annee='%s' a_color='%s' b_color='%s' c_color='%s' z_color='%s' socle='%s' socle_b2i='%s' socle_langue='%s' description='%s' a_code='%s' b_code='%s' c_code='%s' z_code='%s' a_title='%s' b_title='%s' c_title='%s' z_title='%s'>\n",
				str_repeat("\t",$deep),
				urlencode($this->intitule),
				$this->niveau,
				$this->annee,
				$this->a_color,
				$this->b_color,
				$this->c_color,
				$this->z_color,
				urlencode($this->socle),
				urlencode($this->socle_b2i),
				urlencode($this->socle_langue),
				urlencode($this->description),
				$this->a_code,
				$this->b_code,
				$this->c_code,
				$this->z_code,
				urlencode($this->a_title),
				urlencode($this->b_title),
				urlencode($this->c_title),
				urlencode($this->z_title));
		
		$eleves = $this->eleves();
		$periodes = $this->periodes();
		$deep++;
		printf("%s<ELEVES>\n",str_repeat("\t",$deep));
		foreach($eleves as $e) $e->print_xml($deep + 1);
		printf("%s</ELEVES>\n",str_repeat("\t",$deep));
		printf("%s<PERIODES>\n",str_repeat("\t",$deep));
		foreach($periodes as $p) $p->print_xml($deep + 1);
		printf("%s</PERIODES>\n",str_repeat("\t",$deep));
		printf("%s<PROGRESSIONS>\n",str_repeat("\t",$deep));
		foreach($this->progressions() as $c) CProgramme::exportProgression($c,$deep + 1);
		printf("%s</PROGRESSIONS>\n",str_repeat("\t",$deep));
		printf("%s<EVALUATIONS>\n",str_repeat("\t",$deep));
		foreach($this->evaluations() as $e) $e->print_xml($deep + 1,true);
		printf("%s</EVALUATIONS>\n",str_repeat("\t",$deep));
		printf("%s<BILANS>\n",str_repeat("\t",$deep));
		foreach($periodes as $p)
		{
			foreach($eleves as $e)
			{
				if ($b = CBilanProgression::objectForEleveAndPeriode($e->id,$p->id)) $b->print_xml($deep +1);
			}
		}
		foreach($eleves as $e)
		{
			if ($b = CBilanSocle::objectForEleve($e->id)) $b->print_xml($deep +1);
		}
		printf("%s</BILANS>\n",str_repeat("\t",$deep));
		$deep--;
		printf("%s</CLASSE>\n",str_repeat("\t",$deep));
	}
	function __tostring()
	{
		return "[CClasse:" . $this->intitule . "]";
	}
	
}
