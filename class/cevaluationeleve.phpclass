<?
/*
CREATE TABLE `t_evaluationeleve` (
	element int,
	eleve int ,

	mode varchar(200),
	valeur varchar(3),
	valeur_ref varchar(3),
	valeur_max int,
	description TEXT,
	created datetime,
	creator int,
	unique (competence,evaluation,eleve));
*/
class CEvaluationEleve
{
	var $element;
	var $eleve;

	var $mode;
	var $valeur;
	var $valeur_ref;
	var $valeur_max;
	var $description;

	var $created;
	var $creator;
	
	/* class methods */
	
	function createObject(	$element_id,
							$eleve_id,
							$valeur,
							$mode="STANDARD",
							$valeur_max="",
							$valeur_ref="",
							$desc="")
	{
		$o = new CEvaluationEleve();
		$o->element = $element_id;
		$o->eleve = $eleve_id;
		$o->mode = $mode;
		$o->valeur = $valeur;
		$o->valeur_max = $valeur_max;
		$o->valeur_ref = $valeur_ref;
		$o->description = $desc;
		$o->create();
		return $o;
	}
	
	function deleteWithProgression($id)
	{
		global $DB;
		$DB->query("DELETE t_evaluationeleve.* FROM t_evaluationeleve
		LEFT JOIN  t_element on t_element.id = t_evaluationeleve.element
		WHERE t_element.progression = $id");
	}
	function deleteWithElement($element_id)
	{
		global $DB;
		$DB->query("DELETE FROM t_evaluationeleve WHERE element = $element_id");
	}
	function deleteWithEleve($eleve_id)
	{
		global $DB;
		$DB->query("DELETE FROM t_evaluationeleve WHERE eleve = $eleve_id");
	}
	function deleteWithElementAndEleve($element_id,$eleve_id)
	{
		global $DB;
		$DB->query(sprintf("DELETE FROM t_evaluationeleve WHERE element = %d AND eleve=%d", $element_id ,$eleve_id));
	}
	function deleteWithEvaluation($evaluation_id)
	{
		global $DB;
		$DB->query("DELETE t_evaluationeleve.* FROM t_evaluationeleve,t_element WHERE t_element.evaluation = $evaluation_id AND t_element.id = t_evaluationeleve.element");
	}
	/*
	function deleteWithEvaluationEleveCompetence($evaluation_id,$competence_id,$eleve_id)
	{
		global $DB;
		$DB->query("DELETE FROM t_evaluationeleve WHERE evaluation=$evaluation_id AND competence=$competence_id AND eleve=$eleve_id");
	}
	*/
	
	function deleteObjectsWithClasse($classe_id)
	{
		global $DB;
		$DB->query("DELETE t_evaluationeleve.* FROM t_evaluationeleve,t_eleve WHERE t_eleve.id = t_evaluationeleve.eleve AND t_eleve.classe = $classe_id");
	}

	function objectsWithQuery($query)
	{
		global $DB;
		$res = array();
		$r = $DB->query($query);
		if ($r)
		{
			while ($tmp  = $DB->getRow($r))
			{
				$res[] = CEvaluationEleve::objectWithArray($tmp);
			}
		}
		return $res;
	}
	
	function objectWithQuery($query)
	{
		$r = CEvaluationEleve::objectsWithQuery($query);
		if (count($r) > 0) return $r[0];
		return null;
	}
	
	function objects()
	{
// 		return CEvaluationEleve::objectsWithQuery("select * from t_evaluationeleve order by code");
		return null;
	}
	
	function objectWithArray(&$arr)
	{
		$u = new CEvaluationEleve();
		$u->initWithArray($arr);
		return $u;
	}

	function createObjectWithArray(&$arr)
	{
		$u = CEvaluationEleve::objectWithArray($arr);
		if ($u->create()) return $u;
		else return null;
	}

	function objectsForEvaluation($evaluation_id)
	{
		return CEvaluationEleve::objectsWithQuery("select * from t_evaluationeleve,t_element where t_element.evaluation=$evaluation_id AND t_evaluationeleve.element = t_element.id order by t_evaluationeleve.eleve,t_element.progression asc");
	}
	
	function objectsForElement($element_id)
	{
		return CEvaluationEleve::objectsWithQuery("select * from t_evaluationeleve where element=$element_id");
	}
	function objectsForEleve($eleve_id)
	{
		return CEvaluationEleve::objectsWithQuery("select * from t_evaluationeleve where eleve=$eleve_id order by elements asc");
	}

	function lastPerformanceEleveProgression($eleve_id,$progression_id)
	{
		$query = "SELECT t_evaluationeleve.*
				 FROM t_evaluationeleve
				 LEFT JOIN t_element on t_element.id = t_evaluationeleve.element
				 LEFT JOIN t_evaluation on t_evaluation.id = t_element.evaluation
				 WHERE t_evaluationeleve.eleve =  $eleve_id
				 AND t_element.progression = $progression_id
				 ORDER BY t_evaluation.date_examen DESC
				 LIMIT 1";
		return CEvaluationEleve::objectWithQuery($query);
	}

	function objectForEleveAndElement($eleve_id,$element_id)
	{
		return CEvaluationEleve::objectWithQuery("SELECT * FROM t_evaluationeleve WHERE eleve=$eleve_id AND element=$element_id");
	}
	function valeurForEleveAndElement($eleve_id,$element_id)
	{
		global $DB;
		return $DB->oneValue("SELECT valeur FROM t_evaluationeleve WHERE eleve=$eleve_id AND element=$element_id");
	}
	function countForElementAndNiveau($element_id,$niveau='a')
	{
		global $DB;
		$query = "SELECT COUNT(t_evaluationeleve.valeur) FROM t_evaluationeleve,t_element
								WHERE t_evaluationeleve.element=t_element.id
								AND t_element.id = $element_id";
		if ($niveau != "")
		{
			$query .= " AND ((t_element.mode = 'STANDARD' AND t_evaluationeleve.valeur='$niveau')  OR (t_element.mode = 'NOTES' AND t_evaluationeleve.valeur <> ''  ";
			if ($niveau == 'a')
				$query .= " AND t_evaluationeleve.valeur >= t_element.seuil_a ";
			else if ($niveau == 'b')
				$query .= " AND t_evaluationeleve.valeur >= t_element.seuil_b AND t_evaluationeleve.valeur < t_element.seuil_a ";
			else if ($niveau == 'c')
				$query .= " AND t_evaluationeleve.valeur < t_element.seuil_b ";
			$query .= "))";
		} else $query .= " AND t_evaluationeleve.valeur='$niveau'";

		return $DB->oneValue($query);

	}
	
	function countForEvaluationAndNiveau($evaluation_id,$niveau='a')
	{
		global $DB;
		$query = "SELECT COUNT(t_evaluationeleve.valeur) FROM t_evaluationeleve,t_element
								WHERE t_evaluationeleve.element=t_element.id
								AND t_element.evaluation = $evaluation_id";
		if ($niveau != "")
		{
			$query .= " AND ((t_element.mode = 'STANDARD' AND t_evaluationeleve.valeur='$niveau')  OR (t_element.mode = 'NOTES' AND t_evaluationeleve.valeur <> '' AND ";
			if ($niveau == 'a')
				$query .= " t_evaluationeleve.valeur >= t_element.seuil_a ";
			else if ($niveau == 'b')
				$query .= " t_evaluationeleve.valeur >= t_element.seuil_b AND t_evaluationeleve.valeur < t_element.seuil_a ";
			else if ($niveau == 'c')
				$query .= " t_evaluationeleve.valeur < t_element.seuil_b ";
			else $query .= "TRUE";
			$query .= "))";
		} else $query .= " AND t_evaluationeleve.valeur='$niveau'";

		return $DB->oneValue($query);
	}

	function countForClasseAndTypeSocleAndCodeSocleAndNiveau($classe_id,$type,$code,$niveau='a')
	{
		global $DB;
		$query = sprintf("SELECT COUNT(t_evaluationeleve.valeur) FROM t_evaluationeleve
								JOIN t_element ON t_evaluationeleve.element=t_element.id
								JOIN t_progression ON t_progession.id=t_element.progression
								WHERE t_progression.code_%s = '%s'
								AND t_element.evaluation = %d
								AND t_progression.classe = %d
								AND ",$type,$code,$evaluation_id,$classe_id);
		if ($niveau != "")
		{
			$query .= " AND ((t_element.mode = 'STANDARD' AND t_evaluationeleve.valeur='$niveau')  OR (t_element.mode = 'NOTES' AND t_evaluationeleve.valeur <> '' AND ";
			if ($niveau == 'a')
				$query .= " t_evaluationeleve.valeur >= t_element.seuil_a ";
			else if ($niveau == 'b')
				$query .= " t_evaluationeleve.valeur >= t_element.seuil_b AND t_evaluationeleve.valeur < t_element.seuil_a ";
			else if ($niveau == 'c')
				$query .= " t_evaluationeleve.valeur < t_element.seuil_b ";
			else $query .= "TRUE";
			$query .= "))";
		} else $query .= " AND t_evaluationeleve.valeur='$niveau'";

		return $DB->oneValue($query);
	}

	function countForEleveAndTypeSocleAndCodeSocleAndNiveau($eleve_id,$type,$code,$niveau='a')
	{
		global $DB;
		$query = sprintf("SELECT COUNT(t_evaluationeleve.valeur) FROM t_evaluationeleve
								JOIN t_element ON t_evaluationeleve.element=t_element.id
								JOIN t_progression ON t_progression.id=t_element.progression
								WHERE t_progression.code_%s = '%s'
								AND t_evaluationeleve.eleve = %d
								 ",$type,$code,$eleve_id);
		if ($niveau != "")
		{
			$query .= " AND ((t_element.mode = 'STANDARD' AND t_evaluationeleve.valeur='$niveau')  OR (t_element.mode = 'NOTES' AND t_evaluationeleve.valeur <> '' AND ";
			if ($niveau == 'a')
				$query .= " t_evaluationeleve.valeur >= t_element.seuil_a ";
			else if ($niveau == 'b')
				$query .= " t_evaluationeleve.valeur >= t_element.seuil_b AND t_evaluationeleve.valeur < t_element.seuil_a ";
			else if ($niveau == 'c')
				$query .= " t_evaluationeleve.valeur < t_element.seuil_b ";
			else $query .= "TRUE";
			$query .= "))";
		} else $query .= " AND t_evaluationeleve.valeur='$niveau'";

		return $DB->oneValue($query);
	}




	function moyenneForEvaluationCompetence($evaluation_id,$competence_id)
	{
		global $DB;
		return $DB->oneValue("SELECT AVG(valeur) FROM t_evaluationeleve WHERE evaluation=$evaluation_id AND competence=$competence_id AND valeur != ''");
	}
	
	function resultatsForProgressionEleve($progression_id,$eleve_id,$date_debut_ts=0,$date_fin_ts=0,$cumul=0,$mode_eleve=0,$orderbydate=false)
	{
		CDebug::TRACE(0,"resultatsForProgressionEleve(progression_id=$progression_id,eleve_id=$eleve_id,date_debut_ts=$date_debut_ts,date_fin_ts=$date_fin_ts,cumul=$cumul,mode_eleve=$mode_eleve,orderbydate=$orderbydate)");
		global $DB;
		$query = "
SELECT IF(t_element.mode = 'STANDARD',t_evaluationeleve.valeur,
									CASE
										WHEN  t_evaluationeleve.valeur = 'x' THEN 'x'
										WHEN  t_evaluationeleve.valeur >= t_element.seuil_a THEN 'a'
										WHEN  t_evaluationeleve.valeur >= t_element.seuil_b THEN 'b'
										ELSE 'c' 
									END), t_evaluationeleve.eleve ";
		$query .= " FROM t_evaluationeleve,t_element,t_evaluation ";
		$query .= " WHERE t_element.evaluation = t_evaluation.id  ";
		if ($eleve_id) $query .= " AND t_evaluationeleve.eleve = $eleve_id ";
		$query .= " AND t_evaluationeleve.element = t_element.id ";
		$query .= " AND t_element.progression = $progression_id ";
		$query .= " AND t_evaluationeleve.valeur <> '' ";
		if ($date_debut_ts)
			$query .= sprintf(" AND t_evaluation.date_examen > %s ",$DB->DATE($date_debut_ts));
		if ($date_fin_ts)
			$query .= sprintf(" AND t_evaluation.date_examen <= %s ",$DB->DATE($date_fin_ts));
		if ($orderbydate)
			$query .=  "ORDER BY t_evaluation.date_examen,t_element.order_index ";
		$res = array();
		$rs = $DB->query($query);
		if ($rs)
		{
			if (!$eleve_id)
			{
					while(list($val,$e_id) = $DB->getRow($rs))
					{	
						$res["e$e_id|$val"] += 1;
						$res["$val"] += 1;
					}
			} else {
				if ($cumuls)
					while(list($v,$e) = $DB->getRow($rs)) $res[$v] += 1;
				else 
					while(list($v,$e) = $DB->getRow($rs)) $res[] = $v;
			}
		}
		return $res;
	}
	
	function valeursForProgression($progression_id,$mode_eleve=0,$eleve_id=0,$date_debut_ts=0,$date_fin_ts=0)
	{
		global $DB;
		if ($mode_eleve)
			$comp = ",t_evaluationeleve.eleve";
		else $comp = "";
		$cst = "";
		if ($eleve_id) $cst .= " AND t_evaluationeleve.eleve = $eleve_id ";
		if ($date_debut_ts && $date_fin_ts)
				$cst .= sprintf(" AND t_evaluation.date_examen BETWEEN %s AND %s ",$DB->DATE($date_debut_ts),$DB->DATE($date_fin_ts));
		

		$query = "SELECT COUNT(t_evaluationeleve.valeur),t_evaluationeleve.valeur $comp FROM t_evaluationeleve
LEFT JOIN t_element ON t_element.id = t_evaluationeleve.element
LEFT JOIN t_evaluation ON t_evaluation.id = t_element.evaluation
LEFT JOIN  t_progression ON t_progression.id = t_element.progression
WHERE t_progression.id = $progression_id
AND t_element.mode = 'STANDARD'
$cst
GROUP BY t_progression.id, t_evaluationeleve.valeur $comp";
		
		$res = array();
		$rs = $DB->query($query);
		{
			if ($mode_eleve)
				while ($tmp = $DB->getRow($rs)) $res[$tmp[2] . "|" . $tmp[1]] = $tmp[0];
			else while ($tmp = $DB->getRow($rs)) $res[$tmp[1]] = $tmp[0];
		}
		return $res;
	}
	function evolutionForProgression($progression_id,$mode_eleve=0,$eleve_id=0,$date_debut_ts=0,$date_fin_ts=0)
	{
		global $DB;
		$cst = "";
		if ($eleve_id) $cst .= " AND t_evaluationeleve.eleve = $eleve_id ";
		if ($date_debut_ts && $date_fin_ts)
				$cst .= sprintf(" AND t_evaluation.date_examen BETWEEN %s AND %s ",$DB->DATE($date_debut_ts),$DB->DATE($date_fin_ts));
		

		$query = "SELECT t_evaluationeleve.valeur,UNIX_TIMESTAMP(t_evaluation.date_examen),t_evaluationeleve.element $comp FROM t_evaluationeleve
LEFT JOIN t_element ON t_element.id = t_evaluationeleve.element
LEFT JOIN t_evaluation ON t_evaluation.id = t_element.evaluation
LEFT JOIN  t_progression ON t_progression.id = t_element.progression
WHERE t_progression.id = $progression_id
AND t_element.mode = 'STANDARD'
$cst
ORDER BY t_evaluation.date_examen";
		
		$res = array();
		$rs = $DB->query($query);
		{
			while ($tmp = $DB->getRow($rs)) $res[] = $tmp[0];
		}
		return $res;
	}

	function resultatsForClasseAndSocle($classe_id,$type_socle,$code_socle,$eleve_id=0,$date_debut_ts=0,$date_fin_ts=0,$cumuls=0)
	{
		global $DB;
		$query = "
SELECT IF(t_element.mode = 'STANDARD',t_evaluationeleve.valeur,
									CASE 
										WHEN  t_evaluationeleve.valeur = 'x' THEN 'x'
										WHEN  t_evaluationeleve.valeur >= t_element.seuil_a THEN 'a'
										WHEN  t_evaluationeleve.valeur >= t_element.seuil_b THEN 'b'
										ELSE 'c' 
									END), t_progression.code_socle, t_evaluationeleve.eleve ";
		$query .= " FROM t_evaluationeleve,t_element,t_evaluation,t_progression ";
		$query .= " WHERE t_element.evaluation = t_evaluation.id  ";
		if ($eleve_id) $query .= " AND t_evaluationeleve.eleve = $eleve_id ";
		$query .= " AND t_evaluationeleve.element = t_element.id ";		
		$query .= " AND t_element.progression = t_progression.id ";
		$query .= " AND t_evaluationeleve.valeur <> '' ";
		if ($code_socle)
		{	$query .= sprintf(" AND t_progression.code_%s <> '' ",$type_socle);
			$query .= sprintf(" AND t_progression.code_%s like '%s' ",$type_socle,$code_socle); }
		if ($date_debut_ts)
			$query .= sprintf(" AND t_evaluation.date_examen > %s ",$DB->DATE($date_debut_ts));
		if ($date_fin_ts)
			$query .= sprintf(" AND t_evaluation.date_examen <= %s ",$DB->DATE($date_fin_ts));
		$res = array();
		$rs = $DB->query($query);
		if ($rs)
		{
			if (!$eleve_id)
			{
					 
					while(list($val,$e_id) = $DB->getRow($rs))
					{	
						$res["e$e_id|$val"] += 1;
						$res["$val"] += 1;
					}
			} else {
				if ($cumuls)
					while(list($v,$e) = $DB->getRow($rs)) $res[$v] += 1;
				else 
					while(list($v,$e) = $DB->getRow($rs)) $res[] = $v;
			}
		}
		return $res;
	}

	function valeursForClasseAndSocle2($classe_id,$code_socle,$eleve_id=0,$date_debut_ts=0,$date_fin_ts=0)
	{
		global $DB;
		$cst = "";
		if ($eleve_id) $cst .= " AND t_evaluationeleve.eleve = $eleve_id ";
		if ($date_debut_ts && $date_fin_ts)
				$cst .= sprintf(" AND t_evaluation.date_examen BETWEEN %s AND %s ",$DB->DATE($date_debut_ts),$DB->DATE($date_fin_ts));
			
		$query = "SELECT COUNT(t_evaluationeleve.valeur),t_evaluationeleve.valeur FROM t_evaluationeleve
LEFT JOIN t_element ON t_element.id = t_evaluationeleve.element
LEFT JOIN t_evaluation ON t_evaluation.id = t_element.evaluation
LEFT JOIN  t_progression ON t_progression.id = t_element.progression
WHERE t_progression.code_socle like '$code_socle'
AND t_evaluation.classe
AND t_element.mode = 'STANDARD'
$cst
GROUP BY t_progression.id, t_evaluationeleve.valeur $comp";
		
		$res = array();
		$rs = $DB->query($query);
		{
			if ($mode_eleve)
				while ($tmp = $DB->getRow($rs)) $res[$tmp[2] . "|" . $tmp[1]] = $tmp[0];
			else while ($tmp = $DB->getRow($rs)) $res[$tmp[1]] = $tmp[0];
		}
		return $res;
	}
	function evolutionForClasseAndSocle($classe_id,$code_socle,$eleve_id=0,$date_debut_ts=0,$date_fin_ts=0)
	{
		global $DB;
		$cst = "";
		if ($eleve_id) $cst .= " AND t_evaluationeleve.eleve = $eleve_id ";
		if ($date_debut_ts && $date_fin_ts)
				$cst .= sprintf(" AND t_evaluation.date_examen BETWEEN %s AND %s ",$DB->DATE($date_debut_ts),$DB->DATE($date_fin_ts));
		
		$query = "SELECT t_evaluationeleve.valeur  FROM t_evaluationeleve
LEFT JOIN t_element ON t_element.id = t_evaluationeleve.element
LEFT JOIN t_evaluation ON t_evaluation.id = t_element.evaluation
LEFT JOIN  t_progression ON t_progression.id = t_element.progression
WHERE t_progression.code_socle LIKE '$code_socle'
AND t_evaluation.classe
AND t_element.mode = 'STANDARD'
$cst
ORDER BY t_evaluation.date";
		
		$res = array();
		$rs = $DB->query($query);
		{
			while ($tmp = $DB->getRow($rs)) $res[] = $tmp[0];
		}
		return $res;
	}



	function valeursForClasseAndCompetence($classe_id,$competence_id,$mode_eleve=0,$eleve_id=0,$date_debut_ts=0,$date_fin_ts=0)
	{
		global $DB;
		if ($mode_eleve)
			$comp = ",t_evaluationeleve.eleve";
		else $comp = "";
		$cst = "";
		if ($eleve_id) $cst .= " AND t_eleve.id = $eleve_id ";
		if ($date_debut_ts && $date_fin_ts)
				$cst .= sprintf(" AND t_evaluation.date_examen BETWEEN %s AND %s ",$DB->DATE($date_debut_ts),$DB->DATE($date_fin_ts));
		

		$query = "SELECT COUNT(t_evaluationeleve.valeur),t_evaluationeleve.valeur $comp  FROM t_evaluationeleve
LEFT JOIN t_eleve on t_evaluationeleve.eleve = t_eleve.id
LEFT JOIN t_evaluationcompetence ON t_evaluationcompetence.id = t_evaluationeleve.competence
LEFT JOIN t_evaluation ON t_evaluation.id = t_evaluationeleve.evaluation
LEFT JOIN  t_competence ON t_competence.id = t_evaluationcompetence.competence
WHERE t_eleve.classe =  $classe_id
AND t_competence.id = $competence_id
AND t_evaluationcompetence.mode = 'STANDARD'
$cst
GROUP BY t_competence.id, t_evaluationeleve.valeur $comp";
		
		$res = array();
		$rs = $DB->query($query);
		{
			if ($mode_eleve)
				while ($tmp = $DB->getRow($rs)) $res[$tmp[2] . "|" . $tmp[1]] = $tmp[0];
			else while ($tmp = $DB->getRow($rs)) $res[$tmp[1]] = $tmp[0];
		}
		return $res;
	}

	
	/* object method */
	
	function initWithArray(&$arr)
	{
		if (array_key_exists("eleve",$arr))
			$this->eleve = $arr["eleve"];
		if (array_key_exists("element",$arr))
			$this->competence = $arr["element"];

		if (array_key_exists("mode",$arr))
			$this->mode = $arr["mode"];


		if (array_key_exists("valeur",$arr))
			$this->valeur = $arr["valeur"];
		if (array_key_exists("valeur_ref",$arr))
			$this->valeur_ref = $arr["valeur_ref"];
		if (array_key_exists("valeur_max",$arr))
			$this->valeur_max = $arr["valeur_max"];

		if (array_key_exists("description",$arr))
			$this->description = stripcslashes($arr["description"]);

		if (array_key_exists("creator",$arr))
			$this->creator = $arr["creator"];
		if (array_key_exists("created",$arr))
			$this->created = strtotime($arr["created"]);
	}
	
	function competence()
	{
		return CCompetence::objectWithId($this->competence);
	}
	function mode()
	{
		$mms = CEvaluation::modesCalcul();
		$res = $mms[$this->mode];
		if ($this->valeur_max) $res .= " ". $this->valeur_max;
		return $res;
	}

	function create()
	{
		global $DB;
		if ($u = CUser::getCurrentUser())
		{
			$query = sprintf("REPLACE INTO t_evaluationeleve (eleve,element,mode,valeur,valeur_ref,valeur_max,description,creator,created) VALUES (%s,%s,%s,%s,%s,%s,%s,%s,NOW())",
								$DB->INT($this->eleve),
								$DB->INT($this->element),
								$DB->STRING($this->mode),
								$DB->STRING($this->valeur),
								$DB->INT($this->valeur_ref),
								$DB->INT($this->valeur_max),
								$DB->INT($this->description),
								$DB->INT($u->id));
			$res = $DB->query($query);
			if ($res)
			{
				$this->id = $DB->getLastID();
				return true;
			}
		}
		return false;
	}
	
	function update()
	{
		if (!$this->id) return $this->create();
		global $DB;
		if ($u = CUser::getCurrentUser())
		{
			$query = sprintf("UPDATE t_evaluationeleve SET code = %s, intitule = %s, description = %s WHERE id = %s",
								$DB->STRING($this->code),
								$DB->STRING($this->intitule),
								$DB->STRING($this->description),
								$DB->INT($this->id));
			$DB->query($query);
		}
	}
	function eleve()
	{
		return CEleve::objectWithId($this->eleve);
	}
	function exportWithEleve()
	{
		$e = $this->eleve();
		?>
				<resultat valeur="<?= $this->valeur ?>" reference="<?= $this->valeur_ref ?>" nom="<?= $e->nom ?>" prenom="<?= $e->prenom ?>" description="<?= urlencode($this->description) ?>" />
		<?
	}
	function print_xml($deep)
	{
		$e = $this->eleve();
		printf("%s<RESULTAT valeur='%s' reference='%s' nom='%s' prenom='%s' eleve='eleve_%s' />\n",
						str_repeat("\t",$deep),
						$this->valeur,
						$this->valeur_ref,
						$e->nom,
						$e->prenom,
						$e->id);
	}
}
